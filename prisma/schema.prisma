// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id       String   @id @default(uuid())
  fullName     String
  email    String   @unique
  password String
  supportLevel SupportLevelEnum?
  pronouns  PronounsEnum?
  createdAt DateTime @default(now())
  bio      String?
  profilePicture String?

  posts   Post[]  
  commentes Comment[]
  reactions Reaction[]
  reports Report[]

}

model Post{
  id       String   @id @default(uuid())
  title     String
  content   String
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId  String
  author    User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  coments Comment[]
  reactions Reaction[]
  reports Report[]

 
}

model Comment {
  id String @id @default(uuid())
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  
}

model Reaction {
  id String @id @default(uuid())
  type ReactionTypeEnum @default(HEART)
  createdAt DateTime @default(now())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String?
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  
}

model Report {
  id String @id @default(uuid())
  reason String
  details String?
  status ReportStatusEnum @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reporterId String
  reporter   User @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  postId String?
  post       Post? @relation(fields: [postId], references: [id], onDelete: Cascade)

}

enum SupportLevelEnum {
  Level_One
  Level_Two
  Level_Three
}

enum PronounsEnum {
  He_Him
  She_Her
  They_Them
  Other
  Prefer_Not_To_Say
}

enum ReactionTypeEnum {
  HEART
  LIKE
  DISLIKE
}

enum ReportStatusEnum {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}